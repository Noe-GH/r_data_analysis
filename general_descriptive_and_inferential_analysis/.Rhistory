lluvias_mle1<-fitdistr(y, densfun="gamma")
hist(Precipitacion, pch=20, breaks=15, prob=TRUE,main="")
curve(dgamma(x, lluvias_mle1$estimate[1], lluvias_mle1$estimate[2]),col="red",lwd=2,add=T)
library(MASS)
setwd('C:/Users/noe2g/Documents/diplomado_tecnicas_estadisticas_mineria_datos_acatlan/contenido/modulo_2/5_sesion')
lluvias= read.table("lluvias.txt",sep="\t",row.names = 1,header=T)
attach(lluvias)
y= Precipitacion
hist(lluvias$Precipitacion,breaks=seq(0,2400,300),main= "Precipitacion anual en Mexico (2017)",
xlab="Precipitacion (mm)")
lik_wei<- function(theta){
alfa = theta[1]
beta = theta[2]
l=prod( alfa/beta^alfa * y^(alfa-1) * exp(- (y/beta)^alfa) )
return(-l)   # para maximizar
}
alfahat.MOM <- 1.967 ; alfahat.MOM
betahat.MOM <- mean(y)/gamma(1+1/alfahat.MOM) ; betahat.MOM
fit_mle_wei<- optim(c(alfahat.MOM, betahat.MOM), lik_wei); fit_mle_wei
hist(y, pch=20,prob=T,main="", xlab='Precipitación (mm)', ylim=c(0,1e-03), ylab="Frecuencia relativa")
curve(dweibull(x,shape=fit_mle_wei$par[1], scale=fit_mle_wei$par[2]),col="red",lwd=2,add=T) # Máxima verosimilitud
legend(1300, 9e-04, legend=c('X~Wei(1.967, 1002.155)'), col=c("red"), lwd=2, cex=0.55)
hist(y, pch=20,prob=T,main="", xlab='Precipitación (mm)', ylim=c(0,1e-03), ylab="Frecuencia relativa")
curve(dweibull(x,shape=fit_mle_wei$par[1], scale=fit_mle_wei$par[2]),col="red",lwd=2,add=T) # Máxima verosimilitud
legend(1300, 9e-04, legend=c('X~Wei(1.967, 1002.155)'), col=c("red"), lwd=2, cex=0.55)
fit_mle_fd<- fitdistr(y, densfun="weibull", start= list(shape=alfahat.MOM, scale=betahat.MOM), lower = c(-Inf, 0)); str(fit_mle_fd)
hist(y, pch=20,prob=T,main="", xlab='Precipitación (mm)', ylim=c(0,1e-03), ylab="Frecuencia relativa")
curve(dweibull(x,shape=fit_mle_fd$estimate[1], scale=fit_mle_fd$estimate[2]),col="green",lwd=2,add=T) # "fitdistr" fit
curve(dweibull(x,shape=fit_mle_wei$par[1], scale=fit_mle_wei$par[2]),col="red",lwd=2,add=T) # Máxima verosimilitud
legend(1300, 9e-04, legend=c('X~Wei(1.967, 1002.155) (MLE)', 'X~Wei(1.972, 1005.316) (FD)'), col=c('red', 'green'), lwd=c(2, 2), cex=0.55)
loglik_wei<- function(theta){
alfa = theta[1]
beta = theta[2]
ybar = mean(y)
n = length(y)
logybar= mean(log(y))
l= n*log(alfa)-n*log(beta^alfa)-((n*ybar)^alfa/beta^alfa)+n*(alfa-1)*logybar
return(-l)   # para maximizar
}
alfahat.MOM <- 1.96 ; alfahat.MOM
betahat.MOM <- mean(y)/gamma(1+1/alfahat.MOM) ; betahat.MOM
# Maximizar log verosimilitud
loglik_mle3<- optim(c(alfahat.MOM, betahat.MOM), loglik_wei); loglik_mle3
k=2   # numero de parametros a estimar
n= length(y)
AIC_mle3= 2*k-(2*loglik_mle3$value*-1); AIC_mle3
BIC_mle3= log(n)*k-(2*loglik_mle3$value*-1); BIC_mle3
#[1] 417.4999
#[1] 420.4313
k=2
AIC_fd= 2*k-(2*fit_mle_fd$loglik); AIC_fd
BIC_fd= log(n)*k-(2*fit_mle_fd$loglik); BIC_fd
#[1] 483.8237
#[1] 486.7552
loglik_wei<- function(theta){
alfa = theta[1]
beta = theta[2]
ybar = mean(y)
n = length(y)
logybar= mean(log(y))
l= n*log(alfa)-n*log(beta^alfa)-((n*ybar)^alfa/beta^alfa)+n*(alfa-1)*logybar
return(-l)   # para maximizar
}
alfahat.MOM <- 1.96 ; alfahat.MOM
betahat.MOM <- mean(y)/gamma(1+1/alfahat.MOM) ; betahat.MOM
# Maximizar log verosimilitud
loglik_mle3<- optim(c(alfahat.MOM, betahat.MOM), loglik_wei); loglik_mle3
# Comparar modelos: propio y fitdistr()
k=2   # numero de parametros a estimar
n= length(y)
AIC_mle3= 2*k-(2*loglik_mle3$value*-1); AIC_mle3
BIC_mle3= log(n)*k-(2*loglik_mle3$value*-1); BIC_mle3
#[1] 417.4999
#[1] 420.4313
k=2
AIC_fd= 2*k-(2*fit_mle_fd$loglik); AIC_fd
BIC_fd= log(n)*k-(2*fit_mle_fd$loglik); BIC_fd
#[1] 483.8237
#[1] 486.7552
lambdahat.MOM<- round(1/mean(y),digits=4); lambdahat.MOM
# Grafica del modelo exponencial
hist(y, pch=20,prob=TRUE,main="")
curve(dexp(x,lambdahat.MOM),col="blue",lwd=2,add=T)   # momentos
fit_mle_exp<- fitdistr(y, densfun="exponential",rate=lambdahat.MOM); fit_mle_exp
# Histograma con el modelo exponencial generado con MLE
hist(y, pch=20,prob=TRUE,main="")
curve(dexp(x,fit_mle_exp$estimate),col="red",lwd=2,add=T) # "fitdistr" fit
n= length(y)
num<- n*(mean(y)^2)
denom<- sum(y^2)-(n*mean(y)^2)
alfahat.MOM<- num/denom ; alfahat.MOM
betahat.MOM<- mean(y)/alfahat.MOM; 1/betahat.MOM
# Debe usarse el recíproco
# Metodo de MLE a partir de fitdistr()
fit_mle_gamma<-fitdistr(y, densfun="gamma")
hist(Precipitacion, pch=20, breaks=15, prob=TRUE,main="")
curve(dgamma(x, fit_mle_gamma$estimate[1], fit_mle_gamma$estimate[2]),col="red",lwd=2,add=T)
k=1
n= length(y)
AIC_exp= 2*k-(2*fit_mle_exp$loglik); AIC_exp
BIC_exp= log(n)*k-(2*fit_mle_exp$loglik); BIC_exp
#[1] 500.5257
#[1] 501.9915
k=2
AIC_gamma= 2*k-(2*fit_mle_gamma$loglik); AIC_gamma
BIC_gamma= log(n)*k-(2*fit_mle_gamma$loglik); BIC_gamma
#[1] 482.3427
#[1] 485.2742
k=2
AIC_fd= 2*k-(2*fit_mle_fd$loglik); AIC_fd
BIC_fd= log(n)*k-(2*fit_mle_fd$loglik); BIC_fd
#[1] 483.8237
#[1] 486.7552
lik_wei<- function(theta){
alfa = theta[1]
beta = theta[2]
l=prod( alfa/beta^alfa * y^(alfa-1) * exp(- (y/beta)^alfa) )
return(-l)   # para maximizar
}
alfahat.MOM <- 1.967 ; alfahat.MOM
betahat.MOM <- mean(y)/gamma(1+1/alfahat.MOM) ; betahat.MOM
#[1] 1.967
#[1] 1002.155
fit_mle_wei_p<- optim(c(alfahat.MOM, betahat.MOM), lik_wei); fit_mle_wei_p
hist(y, pch=20,prob=T,main="", xlab='Precipitación (mm)', ylim=c(0,1e-03), ylab="Frecuencia relativa")
curve(dweibull(x,shape=fit_mle_wei_p$par[1], scale=fit_mle_wei_p$par[2]),col="red",lwd=2,add=T) # Máxima verosimilitud
legend(1300, 9e-04, legend=c('X~Wei(1.967, 1002.155)'), col=c("red"), lwd=2, cex=0.55)
fit_mle_wei<- fitdistr(y, densfun="weibull", start= list(shape=alfahat.MOM, scale=betahat.MOM), lower = c(-Inf, 0)); str(fit_mle_wei)
hist(y, pch=20,prob=T,main="", xlab='Precipitación (mm)', ylim=c(0,1e-03), ylab="Frecuencia relativa")
curve(dweibull(x,shape=fit_mle_wei$estimate[1], scale=fit_mle_wei$estimate[2]),col="green",lwd=2,add=T) # "fitdistr" fit
curve(dweibull(x,shape=fit_mle_wei_p$par[1], scale=fit_mle_wei_p$par[2]),col="red",lwd=2,add=T) # Máxima verosimilitud
legend(1300, 9e-04, legend=c('X~Wei(1.967, 1002.155) (MLE)', 'X~Wei(1.972, 1005.316) (FD)'), col=c('red', 'green'), lwd=c(2, 2), cex=0.55)
loglik_wei<- function(theta){
alfa = theta[1]
beta = theta[2]
ybar = mean(y)
n = length(y)
logybar= mean(log(y))
l= n*log(alfa)-n*log(beta^alfa)-((n*ybar)^alfa/beta^alfa)+n*(alfa-1)*logybar
return(-l)   # para maximizar
}
alfahat.MOM <- 1.96 ; alfahat.MOM
betahat.MOM <- mean(y)/gamma(1+1/alfahat.MOM) ; betahat.MOM
# Maximizar log verosimilitud
loglik_mle3<- optim(c(alfahat.MOM, betahat.MOM), loglik_wei); loglik_mle3
# Comparar modelos: propio y fitdistr()
k=2   # numero de parametros a estimar
n= length(y)
AIC_mle3= 2*k-(2*loglik_mle3$value*-1); AIC_mle3
BIC_mle3= log(n)*k-(2*loglik_mle3$value*-1); BIC_mle3
#[1] 417.4999
#[1] 420.4313
k=2
AIC_fd= 2*k-(2*fit_mle_wei$loglik); AIC_fd
BIC_fd= log(n)*k-(2*fit_mle_wei$loglik); BIC_fd
#[1] 483.8237
#[1] 486.7552
k=1
n= length(y)
AIC_exp= 2*k-(2*fit_mle_exp$loglik); AIC_exp
BIC_exp= log(n)*k-(2*fit_mle_exp$loglik); BIC_exp
#[1] 500.5257
#[1] 501.9915
k=2
AIC_gamma= 2*k-(2*fit_mle_gamma$loglik); AIC_gamma
BIC_gamma= log(n)*k-(2*fit_mle_gamma$loglik); BIC_gamma
#[1] 482.3427
#[1] 485.2742
k=2
AIC_fd= 2*k-(2*fit_mle_wei$loglik); AIC_fd
BIC_fd= log(n)*k-(2*fit_mle_wei$loglik); BIC_fd
#[1] 483.8237
#[1] 486.7552
k=2
AIC_wei= 2*k-(2*fit_mle_wei$loglik); AIC_wei
BIC_wei= log(n)*k-(2*fit_mle_wei$loglik); BIC_wei
#[1] 483.8237
#[1] 486.7552
hist(y, pch=20,prob=TRUE,main="")
curve(dweibull(x,shape=fit_mle_wei$estimate[1], scale=fit_mle_wei$estimate[2]),col="green",lwd=2,add=T) # "fitdistr" fit
curve(dgamma(x, fit_mle_gamma$estimate[1], fit_mle_gamma$estimate[2]),col="red",lwd=2,add=T) # "fitdistr" fit
curve(dexp(x,fit_mle_exp$estimate),col="blue",lwd=2,add=T) # "fitdistr" fit
curve(dweibull(x,shape=alfahat.MOM, scale=betahat.MOM),col="red",lwd=2,add=T) # "fitdistr" fit
hist(y, pch=20,prob=TRUE,main="")
curve(dweibull(x,shape=fit_mle_wei$estimate[1], scale=fit_mle_wei$estimate[2]),col="green",lwd=2,add=T)
curve(dexp(x,fit_mle_exp$estimate),col="blue",lwd=2,add=T)
curve(dgamma(x, fit_mle_gamma$estimate[1], fit_mle_gamma$estimate[2]),col="red",lwd=2,add=T)
library(MASS)
library(ggplot2)
library(gridExtra)
library(gtable)
library(grid)
setwd('~/diplomado_tecnicas_estadisticas_mineria_datos_acatlan/contenido/modulo_2/proyecto_final')
db = read.table('pie_diabetico.csv',sep=",",header=T)
setwd(getwd())
db = read.table('x_data.csv',sep=",",header=T)
setwd(getwd())
db = read.table('x_data.csv',sep=",",header=T)
getwd()
setwd('~Documents/programas_propios/r_projects_github/general_descriptive_and_inferential_analysis')
db = read.table('/x_data.csv',sep=",",header=T)
setwd('~/Documents/programas_propios/r_projects_github/general_descriptive_and_inferential_analysis')
setwd('~/programas_propios/r_projects_github/general_descriptive_and_inferential_analysis')
db = read.table('/x_data.csv',sep=",",header=T)
db = read.table('x_data.csv',sep=",",header=T)
frec_cat1 = table(db$cat1)
# Frecuencias relativas
prop_cat1 = prop.table(frec_cat1)
# Tabla de frecuencias
frec_table_cat1 <- cbind(frec_cat1, cumsum(frec_cat1), round(prop_cat1,3), round(cumsum(prop_cat1), 3))
colnames(frec_table_cat1) <- c('fi', 'Fi', 'pi', 'Pi')
rownames(frec_table_cat1) <- c('Zero', 'One')
TSpecial <- ttheme_minimal(
core=list(bg_params = list(fill = 'white', col='white'),
fg_params=list(fontface='plain', fontfamily='serif', fontsize=12)),
colhead=list(fg_params=list(col='black',
fontface='plain', fontfamily='serif', fontsize=12,
x=0.5, hjust=0.5)),
rowhead=list(fg_params=list(col='black',
fontface='plain', fontfamily='serif', fontsize=12,
x=0, hjust=0)))
g = tableGrob(frec_table_cat1, theme=TSpecial)
# Línea superior de encabezados
g <- gtable_add_grob(g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(1,"npc"),
x1 = unit(1,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 1.0)),
t = 1, b = 1, r = 1, l = 5)
# Línea inferior de encabezados:
g <- gtable_add_grob(g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(1,"npc"),
x1 = unit(1,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 1.0)),
t = 2, b = 2, r = 2, l = 5)
# Línea inferior de última fila:
g <- gtable_add_grob(g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(1,"npc"),
y1 = unit(0,"npc"),
gp = gpar(lwd = 1.0)),
t = 3, b = 3, r = 1, l = 5)
# Mostrar tabla
grid.arrange(g)
par(mfrow=c(1, 2))
boxplot(db$var1, horizontal=F, main='var1', ylab='Porcentaje', col='white')
boxplot(db$var2, horizontal=F, main='var2', ylab='Miligramos', col='white')
par(mfrow=c(1, 2))
boxplot(db$var1, horizontal=F, main='var1', ylab='var1', col='white')
boxplot(db$var2, horizontal=F, main='var2', ylab='var2', col='white')
par(mfrow=c(1, 1))
library(moments)
skewness(na.exclude(db$var1))
kurtosis(na.exclude(db$var1))
skewness(db$var2)
kurtosis(db$var2)
five_n_general <- cbind(fivenum(db$var1), fivenum(db$var2))
colnames(five_n_general) = c('var1', 'var2')
rownames(five_n_general) = c('Mín', 'q1', 'q2', 'q3', 'Máx')
# Rango (amplitud) intercuartílico
fivenum(db$var1)[4]-fivenum(db$var1)[2]
fivenum(db$var2)[4]-fivenum(db$var2)[2]
g = tableGrob(five_n_general, theme=TSpecial)
# Línea superior de encabezados
g <- gtable_add_grob(g,
grobs = segmentsGrob( # line across the bottom
x0 = unit(0,"npc"),
y0 = unit(1,"npc"),
x1 = unit(1,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 1.0)),
t = 1, b = 1, r = 1, l = 3)
# Línea inferior de encabezados:
g <- gtable_add_grob(g,
grobs = segmentsGrob( # line across the bottom
x0 = unit(0,"npc"),
y0 = unit(1,"npc"),
x1 = unit(1,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 1.0)),
t = 2, b = 2, r = 2, l = 3)
# Línea inferior de la última fila
g <- gtable_add_grob(g,
grobs = segmentsGrob( # line across the bottom
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(1,"npc"),
y1 = unit(0,"npc"),
gp = gpar(lwd = 1.0)),
t = 6, b = 6, r = 1, l = 3)
# Mostrar tabla
grid.arrange(g)
# Guardar tabla
par(mfrow=c(1, 2))
boxplot(db$var1~db$cat1,col="white", main='var1', xlab='cat1', ylab='Porcentaje', names=c('F', 'M'))
boxplot(db$var2~db$cat1,col="white", main='var2', xlab='cat1', ylab='Miligramos', names=c('F', 'M'))
par(mfrow=c(1, 2))
boxplot(db$var1~db$cat1,col="white", main='var1', xlab='cat1', ylab='var1', names=c('0', '1'))
boxplot(db$var2~db$cat1,col="white", main='var2', xlab='cat1', ylab='var2', names=c('0', '1'))
# var1
skewness(na.exclude(db$var1[db$cat1==0])) # F
skewness(na.exclude(db$var1[db$cat1==1])) # M
kurtosis(na.exclude(db$var1[db$cat1==0])) # F
kurtosis(na.exclude(db$var1[db$cat1==1])) # M
#var2
skewness(na.exclude(db$var2[db$cat1==0])) # F
skewness(na.exclude(db$var2[db$cat1==1])) # M
kurtosis(na.exclude(db$var2[db$cat1==0])) # F
kurtosis(na.exclude(db$var2[db$cat1==1])) # M
# Asimetría y curtosis:
# var1
skewness(na.exclude(db$var1[db$cat1==0]))
skewness(na.exclude(db$var1[db$cat1==1]))
kurtosis(na.exclude(db$var1[db$cat1==0]))
kurtosis(na.exclude(db$var1[db$cat1==1]))
#var2
skewness(na.exclude(db$var2[db$cat1==0]))
skewness(na.exclude(db$var2[db$cat1==1]))
kurtosis(na.exclude(db$var2[db$cat1==0]))
kurtosis(na.exclude(db$var2[db$cat1==1]))
# Medianas e IQR:
# var1
median(na.exclude(db$var1[db$cat1==0]))
median(na.exclude(db$var1[db$cat1==1]))
IQR(na.exclude(db$var1[db$cat1==0]))
IQR(na.exclude(db$var1[db$cat1==1]))
# var2
median(na.exclude(db$var2[db$cat1==0]))
median(na.exclude(db$var2[db$cat1==1]))
IQR(na.exclude(db$var2[db$cat1==0]))
IQR(na.exclude(db$var2[db$cat1==1]))
plot(db$var1, db$var2, xlab='var1', ylab='var2')
par(mfrow=c(1, 1))
plot(db$var1, db$var2, xlab='var1', ylab='var2')
cov(db$var1, db$var2, use='complete.obs')
y = na.exclude(db$var1)
length(y)
lambdahat.MOM<- round(1/mean(y),digits=4); lambdahat.MOM
fit_mle_exp<- fitdistr(y, densfun="exponential",rate=lambdahat.MOM); fit_mle_exp
n= length(y)
num<- n*(mean(y)^2)
denom<- sum(y^2)-(n*mean(y)^2)
alfahat.MOM<- num/denom ; alfahat.MOM
betahat.MOM<- mean(y)/alfahat.MOM; 1/betahat.MOM
fit_mle_gamma<-fitdistr(y, densfun="gamma")
alfahat.MOM <- 2.348 ; alfahat.MOM
betahat.MOM <- mean(y)/gamma(1+1/alfahat.MOM) ; betahat.MOM
# MLE
fit_mle_wei<- fitdistr(y, densfun="weibull", start= list(shape=alfahat.MOM, scale=betahat.MOM), lower = c(-Inf, 0))
hist(y, pch=20,prob=T,main="", breaks=seq(1,36,3), xlim=c(0.001, 36.001), xlab='var1', ylim=c(0, 0.12), ylab="Frecuencia relativa")
curve(dexp(x,fit_mle_exp$estimate),col="green",lwd=2,add=T)
curve(dgamma(x, fit_mle_gamma$estimate[1], fit_mle_gamma$estimate[2]),col="red",lwd=2,add=T)
curve(dweibull(x,shape=fit_mle_wei$estimate[1], scale=fit_mle_wei$estimate[2]),col="blue",lwd=2,add=T)
legend(20, 0.11, legend=c('X~Exp(0.099)', 'X~Gamma(7.285, 0.724) (FD)', 'X~Wei(2.348921, 11.334246) (FD)'),
col=c('green', 'red', 'blue'), lwd=2, cex=0.55)
k=1
n= length(y)
AIC_exp= 2*k-(2*fit_mle_exp$loglik); AIC_exp
BIC_exp= log(n)*k-(2*fit_mle_exp$loglik); BIC_exp
#[1] 319.6582
#[1] 321.5294
k=2
AIC_gamma= 2*k-(2*fit_mle_gamma$loglik); AIC_gamma
BIC_gamma= log(n)*k-(2*fit_mle_gamma$loglik); BIC_gamma
#[1] 262.0029
#[1] 265.7454
k=2
AIC_fd= 2*k-(2*fit_mle_wei$loglik); AIC_fd
BIC_fd= log(n)*k-(2*fit_mle_wei$loglik); BIC_fd
#[1] 275.5765
#[1] 279.3189
tabla_AIC_BIC <- matrix(cbind(round(AIC_exp,3), round(BIC_exp, 3),
round(AIC_gamma, 3), round(BIC_gamma, 3),
round(AIC_fd, 3), round(BIC_fd, 3)),
byrow=T, nrow=3, ncol=2)
colnames(tabla_AIC_BIC) <- c('AIC', 'BIC')
rownames(tabla_AIC_BIC) <- c('Modelo Exponencial', 'Modelo Gamma', 'Modelo Weibull')
g = tableGrob(tabla_AIC_BIC, theme=TSpecial)
# Línea superior de encabezados
g <- gtable_add_grob(g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(1,"npc"),
x1 = unit(1,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 1.0)),
t = 1, b = 1, r = 1, l = 3)
# Línea inferior de encabezados:
g <- gtable_add_grob(g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(1,"npc"),
x1 = unit(1,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 1.0)),
t = 2, b = 2, r = 2, l = 3)
# Línea inferior de última fila:
g <- gtable_add_grob(g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(1,"npc"),
y1 = unit(0,"npc"),
gp = gpar(lwd = 1.0)),
t = 4, b = 4, r = 1, l = 3)
# Mostrar tabla
grid.arrange(g)
# Guardar tabla
length(db$cat1[db$cat1==0])/length(db$cat1)
# Proporción muestral de cat1 One:
length(db$cat1[db$cat1==1])/length(db$cat1)
x = na.exclude(db$var1)
mean(x)
var(x)
# var2:
mean(db$var2)
var(db$var2)
# Correlación:
cor(db$var1, db$var2, use='complete.obs')
cor(db$var1, db$var2, use='pairwise')
y <- na.exclude(db$var1)
qqnorm(y,pch=16, main='', xlab='Cuantiles de la muestra', ylab='Cuantiles teóricos')
qqline(y,col="red",lwd=2)
lillie.test(y)
library(forecast)
lambda = BoxCox.lambda(y,method="loglik",lower=-10,upper=10);lambda
trans_y = BoxCox(y, lambda)
hist(trans_y)
library(bimixt) # Para la transformación inversa
lillie.test(y)
library(forecast)
lillie.test(y)
library(nortest)
lillie.test(y)
lambda = BoxCox.lambda(y,method="loglik",lower=-10,upper=10);lambda
trans_y = BoxCox(y, lambda)
hist(trans_y)
qqnorm(trans_y,pch=16, main='', xlab='Cuantiles de la muestra', ylab='Cuantiles teóricos')
qqline(trans_y,col="red",lwd=2)
lillie.test(trans_y)
par(mfrow=c(1,2))
qqnorm(y,pch=16, main='D. Originales', xlab='Cuantiles de la muestra', ylab='Cuantiles teóricos')
qqline(y,col="red",lwd=2)
qqnorm(trans_y,pch=16, main='D. Transformados', xlab='Cuantiles de la muestra', ylab='Cuantiles teóricos')
qqline(trans_y,col="red",lwd=2)
par(mfrow=c(1,1))
xbar<- mean(trans_y)
s<- sd(trans_y)
n<- length(trans_y)
ee_83<- abs(qt(0.17/2,df=n-1,lower.tail = F)*s/sqrt(n))
boxcox.inv(cbind(xbar-ee_83,xbar+ee_83), lambda)
ee_97<- abs(qt(0.03/2,df=n-1,lower.tail = F)*s/sqrt(n))
boxcox.inv(cbind(xbar-ee_97,xbar+ee_97), lambda)
s2 = boxcox.inv(var(trans_y), lambda^2)
cbind(((n-1)*s2)/qchisq(0.17/2,df=(n-1),lower.tail = F), ((n-1)*s2)/qchisq(0.17/2,df=(n-1),lower.tail = T))
cbind(((n-1)*s2)/qchisq(0.03/2,df=(n-1),lower.tail = F), ((n-1)*s2)/qchisq(0.03/2,df=(n-1),lower.tail = T))
muj = na.exclude(trans_y[db$cat1==0])
hom = na.exclude(trans_y[db$cat1==1])
n1 = length(muj)
n2 = length(hom)
i.c_cocvar_83<- c((var(muj)/var(hom))*qf(0.915,df1=n2-1,df2=n1-1,lower.tail = F),
(var(muj)/var(hom))*qf(0.085,df1=n2-1,df2=n1-1,lower.tail = F))
i.c_cocvar_83
i.c_cocvar_97<- c((var(muj)/var(hom))*qf(0.985,df1=n2-1,df2=n1-1,lower.tail = F),
(var(muj)/var(hom))*qf(0.015,df1=n2-1,df2=n1-1,lower.tail = F))
# [1] 0.3601367 3.0907625
# Estimación por intervalos Comparación de medias
# Varianza común
s2pooled<- (((n1-1)*var(muj))+((n2-1)*var(hom)))/(n1+n2-2); s2pooled
spooled<- sqrt(s2pooled)
dif<- mean(muj)-mean(hom)
ee_difmed_83<- qt(0.17/2,df=n1+n2-2,lower.tail = F)*spooled*sqrt((1/n1)+(1/n2))
i.c_difmedias_83<- c(dif-ee_difmed_83,dif+ee_difmed_83); i.c_difmedias_83
ee_difmed_97<- qt(0.03/2,df=n1+n2-2,lower.tail = F)*spooled*sqrt((1/n1)+(1/n2))
i.c_difmedias_97<- c(dif-ee_difmed_97,dif+ee_difmed_97); i.c_difmedias_97
mu = BoxCox(6, lambda)
sigma = sd(trans_y)
library(PASWR)
zcrit1<- qnorm(0.03/2,mean=0,sd=1,lower.tail=T)
zcrit2<- qnorm(0.03/2,mean=0,sd=1,lower.tail=F)
zcrit1*sigma/sqrt(length(trans_y))
mean(trans_y)-mu >= zcrit1*sigma/sqrt(length(trans_y))
z_trans_y<- z.test(trans_y,alternative="two.sided",mu=mu,sigma.x=sigma,conf.level=0.97)
str(z_trans_y)
boxcox.inv(c(1.193182, 1.250617), lambda)
# 8.145256 10.104293
boxcox.inv(sigma, lambda)
muj = na.exclude(trans_y[db$cat1==0])
hom = na.exclude(trans_y[db$cat1==1])
boxplot(muj, hom, horizontal = T, main='',
names= c("Zero","One"))
t_mu_muj_hom_83<- t.test(muj,hom,alternative='two.sided',mu=0,paired=F,conf.level = 0.83)
t_mu_muj_hom_83$statistic
t_mu_muj_hom_83$p.value
t_mu_muj_hom_83$conf.int
t_mu_muj_hom_97<- t.test(muj, hom,alternative='two.sided',mu=0,paired=F,conf.level = 0.97)
t_mu_muj_hom_97$statistic
t_mu_muj_hom_97$p.value
t_mu_muj_hom_97$conf.int
prueba_var_hom_muj<- var.test(muj,hom,ratio=1,alternative="two.sided",conf.level = 0.83)
prueba_var_hom_muj$p.value
prueba_var_hom_muj$conf.int
prueba_var_hom_muj<- var.test(muj,hom,ratio=1,alternative="two.sided",conf.level = 0.97)
prueba_var_hom_muj$p.value
prueba_var_hom_muj$conf.int
